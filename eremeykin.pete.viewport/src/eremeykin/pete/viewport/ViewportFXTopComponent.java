/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eremeykin.pete.viewport;

import eremeykin.pete.api.core.centrallookupapi.CentralLookup;
import eremeykin.pete.api.model.*;
import eremeykin.pete.api.model.Model;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.util.Collection;
import java.util.Iterator;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.ProgressIndicator;
import javax.swing.BoxLayout;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Task;
import org.openide.util.TaskListener;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//eremeykin.pete.viewport//ViewportFX//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ViewportFXTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "eremeykin.pete.viewport.ViewportFXTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ViewportFXAction",
        preferredID = "ViewportFXTopComponent"
)
@Messages({
    "CTL_ViewportFXAction=ViewportFX",
    "CTL_ViewportFXTopComponent=ViewportFX Window",
    "HINT_ViewportFXTopComponent=This is a ViewportFX window"
})
public final class ViewportFXTopComponent extends TopComponent implements LookupListener, TaskListener {

    final JFXPanel fxPanel = new JFXPanel();
    private Lookup.Result<Model> modelResult = null;
    private Lookup.Result taskResult = null;
    private JFXPanel indPanel = new JFXPanel();

    public ViewportFXTopComponent() {
        initComponents();
        setName(Bundle.CTL_ViewportFXTopComponent());
        setToolTipText(Bundle.HINT_ViewportFXTopComponent());

        Lookup.Template template = new Lookup.Template(Model.class);
        CentralLookup cl = CentralLookup.getDefault();
        modelResult = cl.lookup(template);
        modelResult.addLookupListener(this);

        template = new Lookup.Template(Task.class);
        taskResult = cl.lookup(template);
        taskResult.addLookupListener(this);

        Platform.setImplicitExit(false);
        //setLayout(new BorderLayout());
        jPanel2.setLayout(new BorderLayout());
        jPanel2.add(fxPanel);
        fxPanel.setVisible(true);
        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                SceneBuilder builder = new ModelSceneBuilder();
                Director director = new Director();
                director.setSceneBuilder(builder);
                director.buildScene();
                Scene scene = director.getScene();
                fxPanel.setScene(scene);
            }
        });

        ProgressIndicator pin = new ProgressIndicator();
        pin.setProgress(-1.0f);
        Group root = new Group();
        root.getChildren().add(pin);
        Scene s = new Scene(root);
        s.setFill(javafx.scene.paint.Color.TRANSPARENT);
        indPanel.setScene(s);
        indPanel.setMaximumSize(new Dimension(60, 120));

        fxPanel.setLayout(new BoxLayout(fxPanel, BoxLayout.X_AXIS));
        indPanel.setVisible(false);
        fxPanel.add(indPanel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void setSceneToPanel(JFXPanel panel) {

    }

    @Override
    public void resultChanged(LookupEvent evt) {
        Object o = evt.getSource();
        if (o != null) {
            Lookup.Result r = (Lookup.Result) o;
            Collection infos = r.allInstances();
            if (!infos.isEmpty()) {
                this.open();
                Iterator it = infos.iterator();
                if (it.hasNext()) {
                    Object obj = it.next();
                    if (obj instanceof Task) {
                        Task task = (Task) obj;
                        while (task.isFinished()) {
                            if (it.hasNext()) {
                                task = (Task) it.next();
                            }
                        }
                        if (task.isFinished()) {
                            return;
                        }
                        task.addTaskListener(this);
                        indPanel.setVisible(true);
                    }
                    if (obj instanceof Model) {
                        final Model m = (Model) obj;
                        ModelFileChangedListener readerChangedListener = new ModelFileChangedListener() {

                            @Override
                            public void fileChanged(ModelFileChangedEvent evt) {
//                            ViewportFXTopComponent.this.fxPanel.removeAll();
                                Platform.runLater(new Runnable() {
                                    @Override
                                    public void run() {
                                        SceneBuilder builder = new ModelSceneBuilder();
                                        Director director = new Director();
                                        director.setSceneBuilder(builder);
                                        director.buildScene(m.getModelFile());
                                        Scene scene = director.getScene();
                                        fxPanel.setScene(scene);
                                    }
                                });
                            }

                        };
                        readerChangedListener.fileChanged(null);
                        m.addModelFileChangedListener(readerChangedListener);
                    }
                }
            }
        }
    }

    @Override
    public void taskFinished(Task task) {
        indPanel.setVisible(false);
    }
}
