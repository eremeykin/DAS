/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eremeykin.pete.viewport;

import eremeykin.pete.api.core.centrallookupapi.CentralLookup;
import eremeykin.pete.api.model.*;
import eremeykin.pete.api.model.Model;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.util.Collection;
import java.util.Iterator;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.geometry.Pos;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ProgressIndicator;
import javafx.scene.layout.BorderPane;
import javax.swing.BoxLayout;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Task;
import org.openide.util.TaskListener;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//eremeykin.pete.viewport//ViewportFX//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ViewportFXTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "eremeykin.pete.viewport.ViewportFXTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ViewportFXAction",
        preferredID = "ViewportFXTopComponent"
)
@Messages({
    "CTL_ViewportFXAction=ViewportFX",
    "CTL_ViewportFXTopComponent=ViewportFX Window",
    "HINT_ViewportFXTopComponent=This is a ViewportFX window"
})
public final class ViewportFXTopComponent extends TopComponent implements TaskListener {

    private Lookup.Result<Model> modelResult = null;
    private LookupListener modelLookupListener = this.new ModelLookupListener();
    private Lookup.Result<Task> taskResult = null;
    private LookupListener taskLookupListerner = this.new TaskLookupListener();

    final JFXPanel fxPanel = new JFXPanel();
    private JFXPanel indPanel = new JFXPanel();
    private Model model;

    public ViewportFXTopComponent() {
        initComponents();
        setName(Bundle.CTL_ViewportFXTopComponent());
        setToolTipText(Bundle.HINT_ViewportFXTopComponent());

        Platform.setImplicitExit(false);
        //setLayout(new BorderLayout());
        jPanel2.setLayout(new BorderLayout());
        jPanel2.add(fxPanel);
        fxPanel.setVisible(true);
        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                SceneBuilder builder = new ModelSceneBuilder();
                Director director = new Director();
                director.setSceneBuilder(builder);
                director.buildScene();
                Scene scene = director.getScene();
                fxPanel.setScene(scene);
            }
        });

        ProgressIndicator pin = new ProgressIndicator();
        pin.setProgress(-1.0f);
        Group root = new Group();
        root.getChildren().add(pin);
        Scene s = new Scene(root);
        s.setFill(javafx.scene.paint.Color.TRANSPARENT);
        indPanel.setScene(s);
        indPanel.setMaximumSize(new Dimension(60, 120));
  
        fxPanel.setLayout(new BoxLayout(fxPanel, BoxLayout.X_AXIS));
        indPanel.setVisible(false);
        fxPanel.add(indPanel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 318, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(ViewportFXTopComponent.class, "ViewportFXTopComponent.jButton1.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(337, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        modelResult = CentralLookup.getDefault().lookupResult(Model.class);
        modelResult.addLookupListener(modelLookupListener);

        taskResult = CentralLookup.getDefault().lookupResult(Task.class);
        taskResult.addLookupListener(taskLookupListerner);

        Model m = CentralLookup.getDefault().lookup(Model.class);
        if (m != null) {
            model = m;
            updateView();
        }
    }

    @Override
    public void componentClosed() {
        modelResult.removeLookupListener(modelLookupListener);
        taskResult.removeLookupListener(taskLookupListerner);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void setSceneToPanel(JFXPanel panel) {

    }

    private class ModelLookupListener implements LookupListener {

        @Override
        public void resultChanged(LookupEvent ev) {
            Collection<? extends Model> allModels = modelResult.allInstances();
            if (!allModels.isEmpty()) {
                for (Model model : allModels) {
                    setModel(model);
                }
            }
        }
    }

    private class TaskLookupListener implements LookupListener {

        @Override
        public void resultChanged(LookupEvent ev) {
            Iterator iter = taskResult.allInstances().iterator();
            Task task = (Task)iter.next();
            while (task.isFinished()) {
                if (iter.hasNext()) {
                    task = (Task) iter.next();
                }
            }
            if (task.isFinished()) {
                return;
            }
            task.addTaskListener(ViewportFXTopComponent.this);
            indPanel.setVisible(true);
        }

    }


    private void updateView() {
        SceneBuilder builder = new ModelSceneBuilder();
        Director director = new Director();
        director.setSceneBuilder(builder);
        director.buildScene(model.getModelFile());
        Scene scene = director.getScene();
        fxPanel.setScene(scene);
    }

    private void setModel(final Model model) {
        this.model = model;
        ModelFileChangedListener readerChangedListener = new ModelFileChangedListener() {

            @Override
            public void fileChanged(ModelFileChangedEvent evt) {
                Platform.runLater(new Runnable() {
                    @Override
                    public void run() {
                        updateView();
                    }
                });
            }

        };
        readerChangedListener.fileChanged(null);
        model.addModelFileChangedListener(readerChangedListener);
    }

    @Override
    public void taskFinished(Task task) {
        indPanel.setVisible(false);
    }
}
