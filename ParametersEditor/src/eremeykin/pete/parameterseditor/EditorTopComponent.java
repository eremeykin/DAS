/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eremeykin.pete.parameterseditor;

import java.awt.BorderLayout;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.swing.outline.DefaultOutlineModel;
import org.netbeans.swing.outline.Outline;
import org.netbeans.swing.outline.OutlineModel;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.OutlineView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//eremeykin.pete.parameterseditor//Editor//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "EditorTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "eremeykin.pete.parameterseditor.EditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_EditorAction",
        preferredID = "EditorTopComponent"
)
@Messages({
    "CTL_EditorAction=Parameter Editor",
    "CTL_EditorTopComponent=Editor Window",
    "HINT_EditorTopComponent=This is a Editor window"
})
public final class EditorTopComponent extends TopComponent implements ExplorerManager.Provider{
//public final class EditorTopComponent extends TopComponent {
//
    private final ExplorerManager expManager = new ExplorerManager();

    public EditorTopComponent() {
        initComponents();
        setName(Bundle.CTL_EditorTopComponent());
        setToolTipText(Bundle.HINT_EditorTopComponent());
        
        //Set the layout so that we can easily add the OutlineView:
        setLayout(new BorderLayout());

        //Create children, using the factory class we created:
        Children kids = Children.create(new CustomerChildFactory(), true);
        
        //Create a root node:
        Node rootNode = new AbstractNode(kids);

        //Create the OutlineView:
        OutlineView ov = new OutlineView();

        //Set the columns of the outline view,
        //using the name of the property
        //followed by the text to be displayed in the column header:
        ov.setPropertyColumns(
                "city", "City",
                "age", "Age",
                "married", "Married");

        //Hide the root node, since we only care about the children:
        ov.getOutline().setRootVisible(false);
        ov.getOutline().setShowGrid(true);

        //Add the OutlineView to the TopComponent:
        add(ov, BorderLayout.CENTER);

        //Set the root of the ExplorerManager:
        expManager.setRootContext(rootNode);

        //Put the Nodes into the Lookup of the TopComponent,
        //so that the Properties window will be synchronized:
        associateLookup(ExplorerUtils.createLookup(expManager, getActionMap()));

//        initComponents();
//        setName(Bundle.CTL_EditorTopComponent());
//        setToolTipText(Bundle.HINT_EditorTopComponent());
//
//        setName(Bundle.CTL_EditorTopComponent());
//        setToolTipText(Bundle.HINT_EditorTopComponent());
//
////        associateLookup(ExplorerUtils.createLookup(expManager, getActionMap()));
//        setLayout(new BorderLayout());
//
//        ParameterChildFactory factory = new ParameterChildFactory();
//        Node value = new AbstractNode(Children.create(factory, true));
//
////        OutlineView outlineView = new OutlineView();
////        Outline outline = outlineView.getOutline();
//        OutlineModel mdl = DefaultOutlineModel.createOutlineModel(new ParameterTreeModel(value), new ParameterRowModel());
//        Outline outline = new Outline(mdl);
//        OutlineView outlineView = new OutlineView("er ere rewr er we");
//        outlineView.set
////        outline.setModel(mdl);
//        add(outline, BorderLayout.CENTER);
//        
////        expManager.setRootContext(new AbstractNode(Children.create(new ParameterChildFactory(), true)));
//        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return this.expManager;
    }
}
