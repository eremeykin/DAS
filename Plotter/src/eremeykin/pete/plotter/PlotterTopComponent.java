/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eremeykin.pete.plotter;

import eremeykin.pete.coreapi.centrallookupapi.CentralLookup;
import eremeykin.pete.coreapi.workspace.WorkspaceManager;
import eremeykin.pete.modelapi.Model;
import java.awt.BorderLayout;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilenameFilter;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardWatchEventKinds;
import java.nio.file.WatchEvent;
import java.nio.file.WatchKey;
import java.nio.file.WatchService;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//eremeykin.pete.plotter//Plotter//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "PlotterTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "eremeykin.pete.plotter.PlotterTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_PlotterAction",
        preferredID = "PlotterTopComponent"
)
@Messages({
    "CTL_PlotterAction=Plotter",
    "CTL_PlotterTopComponent=Plotter Window",
    "HINT_PlotterTopComponent=This is a Plotter window"
})
public final class PlotterTopComponent extends TopComponent {

    private File home;

    public PlotterTopComponent() {
        initComponents();
        setName(Bundle.CTL_PlotterTopComponent());
        setToolTipText(Bundle.HINT_PlotterTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        refershData();
        watchFile();
    }

    private void refershData() {
        Lookup.Template template = new Lookup.Template(Model.class);
        CentralLookup cl = CentralLookup.getDefault();
        try {
            removeAll();
            Model model = (Model) cl.lookup(template).allInstances().iterator().next();
//            this.home = model.getHome();
            this.home = WorkspaceManager.INSTANCE.getWorkspace();
//            final XYDataset dataset = createDataset(model.getHome());
            final XYDataset dataset = createDataset(home);
            final JFreeChart chart = createChart(dataset);
            ChartPanel chartPanel = new ChartPanel(chart);
            chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
            setLayout(new java.awt.BorderLayout());
            add(chartPanel, BorderLayout.CENTER);
            validate();
        } catch (NoSuchElementException ex) {
//            JOptionPane.showMessageDialog(null, "Нет открытой модели.");
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Файл с результатами не найден.");
        }
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }

    private XYDataset createDataset(File home) throws FileNotFoundException {
        // для первого rpt файла
        File[] rptFiles = home.listFiles(new FilenameFilter() {

            @Override
            public boolean accept(File dir, String name) {
                if (name.endsWith(".rpt")) {
                    return true;
                }
                return false;
            }
        });
        // Поймать исключение если такого файла нет
        File firstRPT = rptFiles[0];
        final XYSeries series2 = new XYSeries("Second");
        Scanner scanner = new Scanner(firstRPT);
        scanner.useDelimiter("\\s+|\n");
        while (scanner.hasNext()) {
            String line = scanner.next();
            try {
                double x1 = Double.valueOf(line);
                line = scanner.next();
                double x2 = Double.valueOf(line);
                System.out.println("x1=" + x1 + "\nx2=" + x2);
                series2.add(x1, x2);
            } catch (NumberFormatException ex) {
            }

        }
//        
//        series2.add(0.000000000, 541.401E-06);
//        series2.add(5.26413E-03, 449.221E-06);
//        series2.add(10.5119E-03, 225.722E-06);
//        series2.add(15.7459E-03, -35.0929E-06);
//        series2.add(20.9713E-03, -270.799E-06);
//        series2.add(26.1895E-03, -444.267E-06);
//        series2.add(31.4003E-03, -526.244E-06);
//        series2.add(36.6038E-03, -484.232E-06);
//        series2.add(41.8070E-03, -292.484E-06);
//        series2.add(47.0312E-03, 12.6708E-06);
//        series2.add(52.2851E-03, 305.269E-06);
//        series2.add(57.5441E-03, 476.754E-06);
//        series2.add(62.7959E-03, 512.287E-06);
//        series2.add(68.0428E-03, 436.76E-06);
//        series2.add(73.2877E-03, 275.297E-06);
//        series2.add(78.5313E-03, 48.1693E-06);
//        series2.add(83.7708E-03, -216.333E-06);
//        series2.add(88.9930E-03, -457.335E-06);
//        series2.add(94.1847E-03, -560.807E-06);
//        series2.add(99.3765E-03, -457.335E-06);
//        series2.add(104.599E-03, -216.333E-06);
//        series2.add(109.838E-03, 48.1693E-06);
//        series2.add(115.082E-03, 275.297E-06);
//        series2.add(120.327E-03, 436.76E-06);
//        series2.add(125.574E-03, 512.287E-06);
//        series2.add(130.825E-03, 476.754E-06);
//        series2.add(136.084E-03, 305.269E-06);
//        series2.add(141.338E-03, 12.6707E-06);
//        series2.add(146.563E-03, -292.484E-06);
//        series2.add(151.766E-03, -484.232E-06);
//        series2.add(156.969E-03, -526.244E-06);
//        series2.add(162.180E-03, -444.267E-06);
//        series2.add(167.398E-03, -270.799E-06);
//        series2.add(172.624E-03, -35.0929E-06);
//        series2.add(177.858E-03, 225.722E-06);
//        series2.add(183.105E-03, 449.221E-06);

        final XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series2);
        return dataset;

    }

    private JFreeChart createChart(final XYDataset dataset) {

        // create the chart...
        final JFreeChart chart = ChartFactory.createXYLineChart(
                "Деформации детали", // chart title
                "Расстояние", // x axis label
                "Величина деформации", // y axis label
                dataset, // data
                PlotOrientation.VERTICAL,
                true, // include legend
                true, // tooltips
                false // urls
        );

        // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
        chart.setBackgroundPaint(Color.white);

//        final StandardLegend legend = (StandardLegend) chart.getLegend();
        //      legend.setDisplaySeriesShapes(true);
        // get a reference to the plot for further customisation...
        final XYPlot plot = chart.getXYPlot();
        plot.setBackgroundPaint(Color.WHITE);
        //    plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
        plot.setDomainGridlinePaint(Color.DARK_GRAY);
        plot.setRangeGridlinePaint(Color.DARK_GRAY);

        final XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
        renderer.setSeriesLinesVisible(0, true);
        renderer.setSeriesShapesVisible(0, false);
        plot.setRenderer(renderer);

        // change the auto tick unit selection to integer units only...
//        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
//        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        // OPTIONAL CUSTOMISATION COMPLETED.
        return chart;
    }

    private void watchFile() {
        if (this.home == null) {
            return;
        }
        Thread watchFile = new Thread(new Runnable() {

            @Override
            public void run() {
                Path myDir = PlotterTopComponent.this.home.toPath();
                while (true) {
                    try {
                        WatchService watcher = myDir.getFileSystem().newWatchService();
                        myDir.register(watcher, StandardWatchEventKinds.ENTRY_CREATE,
                                StandardWatchEventKinds.ENTRY_DELETE, StandardWatchEventKinds.ENTRY_MODIFY);

                        WatchKey watckKey = watcher.take();

                        List<WatchEvent<?>> events = watckKey.pollEvents();
                        for (WatchEvent event : events) {
                            if (event.kind() == StandardWatchEventKinds.ENTRY_CREATE) {
                                System.out.println("Created: " + event.context().toString());
                            }
                            if (event.kind() == StandardWatchEventKinds.ENTRY_DELETE) {
                                System.out.println("Delete: " + event.context().toString());
                            }
                            if (event.kind() == StandardWatchEventKinds.ENTRY_MODIFY) {
                                System.out.println("Modify: " + event.context().toString());
                                refershData();
                            }
                        }
                    } catch (IOException e) {
                        System.out.println("Error: " + e.toString());
                    } catch (InterruptedException e) {
                        System.out.println("Error: " + e.toString());
                    }
                }
            }
        });
        watchFile.start();
    }

}
