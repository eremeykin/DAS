/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eremeykin.pete.plotter;

import eremeykin.pete.coreapi.centrallookupapi.CentralLookup;
import eremeykin.pete.coreapi.loggerapi.Logger;
import eremeykin.pete.coreapi.loggerapi.LoggerManager;
import eremeykin.pete.coreapi.workspace.WorkspaceManager;
import eremeykin.pete.modelapi.Model;
import java.awt.BorderLayout;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilenameFilter;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardWatchEventKinds;
import java.nio.file.WatchEvent;
import java.nio.file.WatchKey;
import java.nio.file.WatchService;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//eremeykin.pete.plotter//Plotter//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "PlotterTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "eremeykin.pete.plotter.PlotterTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_PlotterAction",
        preferredID = "PlotterTopComponent"
)
@Messages({
    "CTL_PlotterAction=Plotter",
    "CTL_PlotterTopComponent=Plotter Window",
    "HINT_PlotterTopComponent=This is a Plotter window"
})
public final class PlotterTopComponent extends TopComponent {

    private static final Logger LOGGER = LoggerManager.getLogger(PlotterTopComponent.class);
    private File home;

    public PlotterTopComponent() {
        initComponents();
        setName(Bundle.CTL_PlotterTopComponent());
        setToolTipText(Bundle.HINT_PlotterTopComponent());
        refershData();
        watchFile();
        home = WorkspaceManager.INSTANCE.getWorkspace();
        final XYDataset dataset = createDataset(home);
        if (dataset != null) {
            final JFreeChart chart = createChart(dataset);
            ChartPanel chartPanel = new ChartPanel(chart);
//            chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
            setLayout(new java.awt.BorderLayout());
            add(chartPanel, BorderLayout.CENTER);
            validate();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PlotterTopComponent.class, "PlotterTopComponent.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(275, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(274, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        refershData();
        watchFile();
    }

    private void refershData() {
        Lookup.Template template = new Lookup.Template(Model.class);
        CentralLookup cl = CentralLookup.getDefault();
        try {
            removeAll();
            Model model = (Model) cl.lookup(template).allInstances().iterator().next();
            this.home = WorkspaceManager.INSTANCE.getWorkspace();
            final XYDataset dataset = createDataset(home);
            if (dataset == null) {
                return;
            }
            final JFreeChart chart = createChart(dataset);
            ChartPanel chartPanel = new ChartPanel(chart);
            chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
            setLayout(new java.awt.BorderLayout());
            add(chartPanel, BorderLayout.CENTER);
            validate();
        } catch (NoSuchElementException ex) {
//            JOptionPane.showMessageDialog(null, "Нет открытой модели.");
        }
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }

    private XYDataset createDataset(File home) {
        // for first rpt file
        File[] rptFiles = home.listFiles(new FilenameFilter() {

            @Override
            public boolean accept(File dir, String name) {
                if (name.endsWith(".rpt")) {
                    return true;
                }
                return false;
            }
        });
        // catch if there is no such file
        if (rptFiles.length == 0) {
            return null;
        }
        File firstRPT = rptFiles[0];
        final XYSeries series2 = new XYSeries("Second");
        Scanner scanner;
        try {
            scanner = new Scanner(firstRPT);
        } catch (FileNotFoundException ex) {
            return null;
        }
        scanner.useDelimiter("\\s+|\n");
        for (int i = 0; scanner.hasNext(); i++) {
            String line = scanner.next();
            try {
                double x1 = Double.valueOf(line);
                line = scanner.next();
                double x2 = Double.valueOf(line);
                System.out.println("x1=" + x1 + "\nx2=" + x2);
                series2.add(x1, x2);
            } catch (NumberFormatException ex) {
                // only if it is the third or following line
                if (i > 1) {
                    LOGGER.error("Error while parsing double from file: " + firstRPT.getAbsolutePath());
                    JOptionPane.showMessageDialog(this, "Error while parsing result file.", "Parsing error", JOptionPane.ERROR_MESSAGE);
                }
            }

        }

        final XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series2);
        return dataset;

    }

    private JFreeChart createChart(final XYDataset dataset) {

        // create the chart...
        final JFreeChart chart = ChartFactory.createXYLineChart(
                "Деформации детали", // chart title
                "Расстояние", // x axis label
                "Величина деформации", // y axis label
                dataset, // data
                PlotOrientation.VERTICAL,
                true, // include legend
                true, // tooltips
                false // urls
        );

        // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
        chart.setBackgroundPaint(Color.white);

//        final StandardLegend legend = (StandardLegend) chart.getLegend();
        //      legend.setDisplaySeriesShapes(true);
        // get a reference to the plot for further customisation...
        final XYPlot plot = chart.getXYPlot();
        plot.setBackgroundPaint(Color.WHITE);
        //    plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
        plot.setDomainGridlinePaint(Color.DARK_GRAY);
        plot.setRangeGridlinePaint(Color.DARK_GRAY);

        final XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
        renderer.setSeriesLinesVisible(0, true);
        renderer.setSeriesShapesVisible(0, false);
        plot.setRenderer(renderer);

        // change the auto tick unit selection to integer units only...
//        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
//        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        // OPTIONAL CUSTOMISATION COMPLETED.
        return chart;
    }

    private void watchFile() {
        if (this.home == null) {
            return;
        }
        Thread watchFile = new Thread(new Runnable() {

            @Override
            public void run() {
                Path myDir = PlotterTopComponent.this.home.toPath();
                while (true) {
                    try {
                        WatchService watcher = myDir.getFileSystem().newWatchService();
                        myDir.register(watcher, StandardWatchEventKinds.ENTRY_MODIFY);

                        WatchKey watckKey = watcher.take();

                        List<WatchEvent<?>> events = watckKey.pollEvents();
                        for (WatchEvent event : events) {
                            if (event.kind() == StandardWatchEventKinds.ENTRY_MODIFY) {
                                refershData();
                            }
                        }
                    } catch (IOException e) {
                        LOGGER.error("IO Error while watching file: " + home);
                        JOptionPane.showMessageDialog(PlotterTopComponent.this, "Error while watching the result file.", "Error", JOptionPane.ERROR_MESSAGE);
                    } catch (InterruptedException e) {
                        LOGGER.error("Watching file thread was interrupted. " + home);
                        JOptionPane.showMessageDialog(PlotterTopComponent.this, "Watching file thread was interrupted.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        });
        watchFile.start();
    }

}
